{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "tool",
      "description": "Everything about your tool",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "job",
      "description": "Api documentation about jobs"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "file",
      "description": "Operation about files",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/tool": {
      "get": {
        "tags": [
          "tool"
        ],
        "summary": "Lists a find tool",
        "description": "you can filter by Muliple id status, name, observation ",
        "operationId": "findToolsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idState",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name values that need to be considered for filter",
            "type": "string"
          },
          {
            "name": "observation",
            "in": "query",
            "description": "observation values that need to be considered for filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tool"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "post": {
        "tags": [
          "tool"
        ],
        "summary": "Add a new tool to the system",
        "description": "",
        "operationId": "addPet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "tool object that needs to be added to the system",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tool"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/tool/{id}": {
      "get": {
        "tags": [
          "tool"
        ],
        "summary": "Find tool by ID",
        "description": "Returns a single tool",
        "operationId": "getToolById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tool"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tool not found"
          }
        }
      },
      "put": {
        "tags": [
          "tool"
        ],
        "summary": "Update an existing tool",
        "description": "",
        "operationId": "updateTool",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "id",
            "description": "Tool object that needs to be added to the system",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tool"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "tool not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "tool"
        ],
        "summary": "Deletes a tool",
        "description": "",
        "operationId": "deleteTool",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tool id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tool not found"
          }
        }
      }
    },
    "/job/create": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "data aviable and necessary for create new job",
        "description": "Returns states and  tool aviable for register new job",
        "operationId": "createJob",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "tools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tool"
                  }
                },
                "jobStates": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobState"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/job": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "Returns jobs with tools by status ",
        "description": "return list of jobs",
        "operationId": "listJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idState",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [
                "1",
                "2",
                "3"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name values that need to be considered for filter",
            "type": "string"
          },
          {
            "name": "observation",
            "in": "query",
            "description": "observation values that need to be considered for filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "job"
        ],
        "summary": "Create a jobs",
        "description": "send a correct parametres. A new job will be saved in the system",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "Find job  by ID",
        "description": "",
        "operationId": "getJobId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of job that needs",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "job not found"
          }
        }
      },
      "put": {
        "tags": [
          "job"
        ],
        "summary": "update a jobs",
        "description": "send a correct parametres. A  job will be updated in the system",
        "operationId": "updateJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Attributes for job ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Invalid job"
          }
        }
      },
      "delete": {
        "tags": [
          "job"
        ],
        "summary": "Delete job",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the job that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/create": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "data necessary for created a new user",
        "description": "This can only be done by the logged in user.",
        "operationId": "requestCreateUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "roles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Rol"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched. Use 1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/file": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "Returns jobs files ",
        "description": "return list of file",
        "operationId": "listFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idJob",
            "in": "query",
            "description": "job Id to return files list",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Files"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "file"
        ],
        "summary": "Create file",
        "description": "send a correct parametres. A new file will be saved in the system",
        "operationId": "fileSaved",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "File to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Files"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/file/{id}": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "Find data file (NOT DONWLOAD)",
        "description": "",
        "operationId": "getInfoFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of file that needs",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "job not found"
          }
        }
      },
      "delete": {
        "tags": [
          "file"
        ],
        "summary": "Delete file",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deletedFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the file that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/file/download/{id}": {
      "get": {
        "tags": [
          "file"
        ],
        "summary": "download file",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "downloadFile",
        "produces": [
          "application/binary"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the file that needs to download",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "any file .csv, txt. ",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Tool": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "algorithm": {
          "type": "string",
          "description": "path file where is installed  tool ",
          "example": "etc/dev/install/python"
        },
        "idState": {
          "description": "send only id",
          "$ref": "#/definitions/ToolState"
        },
        "path": {
          "type": "string",
          "description": "name of the tool",
          "example": "python"
        },
        "observation": {
          "type": "string",
          "description": ""
        }
      }
    },
    "Job": {
      "type": "object",
      "required": [
        "name",
        "algorithm",
        "idState",
        "idTool"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "name of job- the server concat the code automatically"
        },
        "observation": {
          "type": "string",
          "example": "result neural network"
        },
        "algorithm": {
          "type": "string",
          "description": "path file to execute in the server"
        },
        "outPut": {
          "type": "string",
          "description": "name of file to save a output"
        },
        "submitCondor": {
          "type": "string",
          "description": "name of file .submit"
        },
        "idState": {
          "type": "integer",
          "description": "for store send 1"
        },
        "idTool": {
          "description": "send id",
          "$ref": "#/definitions/Tool"
        }
      }
    },
    "Files": {
      "type": "object",
      "description": "data files of jobs",
      "required": [
        "realname",
        "fullPath",
        "idJob"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "realname": {
          "type": "string",
          "description": "this field is the name with was upload"
        },
        "fullPath": {
          "type": "string",
          "description": "this field containd the path where is file"
        },
        "idJob": {
          "type": "integer",
          "$ref": "#/definitions/Job"
        }
      }
    },
    "ToolState": {
      "type": "object",
      "description": "tools status",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "class": {
          "type": "string",
          "example": "warning,danger,info ..etc",
          "description": "for bootstrap labels"
        }
      }
    },
    "JobState": {
      "type": "object",
      "description": "jobs status",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "class": {
          "type": "string",
          "example": "warning,danger,info ..etc",
          "description": "for bootstrap labels"
        }
      }
    },
    "Rol": {
      "type": "object",
      "description": "roles of aplication",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "admin"
        },
        "observation": {
          "type": "string",
          "description": "some observation"
        },
        "idState": {
          "type": "integer",
          "description": "enum 0,1"
        }
      }
    },
    "User": {
      "type": "object",
      "description": "jobs status",
      "required": [
        "fullName",
        "idRol",
        "password",
        "email"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "fullName": {
          "type": "string",
          "example": "John Doe"
        },
        "code": {
          "type": "string",
          "example": "T00030535",
          "description": "user's code in university"
        },
        "idRol": {
          "$ref": "#/definitions/Rol",
          "description": "send id"
        },
        "password": {
          "type": "string",
          "description": "apply only for external users "
        },
        "email": {
          "type": "string",
          "description": "email for notifications",
          "example": "ederb1.1c@gmail.com"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}